//created on: 5 May 2020

import com.sbnz.career.adviser.model.*;
import com.sbnz.career.adviser.entity.*;
import java.util.List;

agenda-group "preferencesTest"

rule "Calculating number of matching activities"
	salience 200
	no-loop
	lock-on-active
	when
	
		$criteriums : Criteriums(personality == true)
		$questPos : List( size > 0) from collect (PreferenceQuestionResult(isChecked == true))
		$allPosActivities: List() from accumulate (
			$question: PreferenceQuestionResult($activity : activity) from $questPos,
			collectList($activity)
		)
		
		 $possibleProfession : PossibleProfession($activities : profession.activities, $score : score)

    	 $num:= Number(intValue >= 1) 
			from accumulate( 
				$a : Preference( this memberOf $allPosActivities)
				from $activities;
				count($a)
			)
	
	then
		System.out.println("Calculating number of matching activities.");
		modify($possibleProfession) {setNumPref((Long) $num);}
		System.out.println($num);
end


		
	//Ovo pravilo je bilo okinuto pre prethondih pravila u oovom fajlu koje sam objasnila	
rule "If there are not possible profession, find and insert them"
	salience 100
	no-loop
	lock-on-active
    when
        $criteriums : Criteriums(personality == false, preferences == true) //znaci da nije kalkulisan possibleProfession
        $questPos : List( size > 0) from collect (PreferenceQuestionResult(isChecked == true))
        
        $allPosActivities: List() from accumulate (
			$question: PreferenceQuestionResult($activity : activity) from $questPos,
			collectList($activity)
		)
		
       $profession : Profession($name : name, $activities : activities)

    	 $num:= Number(intValue >= 1) 
			from accumulate( 
				$a : Preference( this memberOf $allPosActivities)
				from $activities;
				count($a)
			)
    then
    	 System.out.println("Possible profession inserted "+$name);
    	 PossibleProfession possibleProfession = new PossibleProfession($profession);
    	 possibleProfession.setNumPref((Long) $num);
 	  	 insert(possibleProfession);
 	  	 System.out.println("Num of pref: "+$num);
 	  	 delete($profession);
 	  	 
end


/*
	Profesija koja ima naveden najveci broj aktivnosti i sve su odabrane – dodaje se score 1.5
*/
rule "Rule 0 - preferences test"
	salience 1
	no-loop
	when
		$l : List( size > 0) from collect (PossibleProfession(numPref == profession.activities.size()))
		accumulate(
			$p : PossibleProfession (
				$k : numPref
			) from $l;
			$max: max($k)
		)
		
		$possibleProfession : PossibleProfession( numPref == $max, $name : profession.name ) from $l
	then
		System.out.println("Rule 0 : score 1.5 - **All activities selected, but and it is the highest number of activities.** - Profession "+$name);
		$possibleProfession.increaseScore(1.5);
end

/*
Profesija koja ima odabrane sve aktivnosti, ali nije to maksimalan broj gde su sve odabrane – dodaje se score 1.0.
*/
rule "Rule 1 - preferences test"
	salience 1
	no-loop
	when
		$l : List( size > 0) from collect (PossibleProfession(numPref == profession.activities.size()))
			accumulate(
				$p : PossibleProfession (
					$k : numPref
				) from $l;
				$max: max($k)
			)
		$possibleProfession : PossibleProfession(numPref == profession.activities.size(),numPref != $max, $name : profession.name)
	then
		System.out.println("Rule 1 : score 1.0 - **All activities selected, but it is not the highest number of activities.** - Profession "+$name);
		$possibleProfession.increaseScore(1.0);
end


/*
Profesija koja nema odabrane sve aktivnosti ali je taj broj veci od profesije koja ima najveci broj odabranih svih aktivnosti – dodaje se score 1.25.

Primer: Profesija A ima 3 aktivnosti i korisnik je odabrao sve i to je maksimalan broj aktivnosti gde su sve odabrane. Profesija B ima navedenih 5 aktivnosti a korisnik je odabrao 4.
*/
rule "Rule 2 - preferences test"
	salience 1
	no-loop
	when
		$l : List( size > 0) from collect (PossibleProfession(numPref == profession.activities.size()))
		accumulate(
			$p : PossibleProfession (
				$k : numPref
			) from $l;
			$max: max($k)
		)
		$possibleProfession : PossibleProfession(numPref < profession.activities.size(), numPref > $max, $name : profession.name)
	
			
	then
		//System.out.println("Rule 2 preferences test, not everything satisfied 1.25" + $name);
		System.out.println("Rule 2 : score 1.25 - **Not all activities selected, but it is larger number than the highest number of maximum all selected.** - Profession "+$name);
		$possibleProfession.increaseScore(1.25);
end

/*
Profesija nema odabrane sve aktivnosti i taj broj je manji od minimalnog broja odabranih svih aktivnosti neke profesije– dodaje se score 1.0.
*/
rule "Rule 3 - preferences test"
	salience 1
	no-loop
	when
		$l : List( size > 0) from collect (PossibleProfession(numPref == profession.activities.size()))
		accumulate(
			$p : PossibleProfession (
				$k : numPref
			) from $l;
			$min: min($k)
		)
		$possibleProfession : PossibleProfession(numPref < profession.activities.size(), numPref <= $min, $name : profession.name, $numPref : numPref, $activities : profession.activities)
	
	then
		System.out.println("Rule 3 : score "+(double) $numPref/$activities.size() + " - **Not all activities selected, and it is smaller number than min number of all selected.** - Profession "+$name);
		//System.out.println("Rule 3 preferences test " + $name);
		$possibleProfession.increaseScore((double) $numPref/$activities.size());
end


/*
Profesija nema odabrane sve aktivnosti, ali je taj broj veci od minimalnog broja odabranih svih aktivnosti – dodaje se score 1.0.
*/
rule "Rule 4 - preferences test"
	salience 1
	no-loop
	when
		$l : List( size > 0) from collect (PossibleProfession(numPref == profession.activities.size()))
		accumulate(
			$p : PossibleProfession (
				$k : numPref
			) from $l;
			$min: min($k),
			$max: max($k)
		)
		$possibleProfession : PossibleProfession(numPref < profession.activities.size(), numPref > $min, numPref <= $max, $name : profession.name)
		
	then
		System.out.println("Rule 4 : score 1.0 - **Not all activities selected, but it is larger number than the minimum of all selected.** - Profession "+$name);
		$possibleProfession.increaseScore(1.0);
end

/*
Profesija nema odabrane sve aktivnosti i ne postoji profesija kod koje su odbrane sve aktivnosti.
*/
rule "Rule 5 - preferences test"
	salience 1
	no-loop
	when
		not (PossibleProfession(numPref == profession.activities.size()))
		
		$possibleProfession : PossibleProfession(numPref < profession.activities.size(), $name : profession.name, $numPref : numPref, $activities : profession.activities)
	
	then
		System.out.println("Rule 5 : score "+(double) $numPref/$activities.size() + " - **Not all activities selected and there is no profession where all activities are selected.** - Profession "+$name);
		$possibleProfession.increaseScore((double) $numPref/$activities.size());
end


