package sbnz.integracija;


import com.sbnz.career.adviser.model.*;
import java.util.List;


rule "Traits result"
	agenda-group "personalityTest"
	no-loop
	lock-on-active
    when
        $traitQuestionResult: TraitQuestionResult($target : traitQuestion.trait.target)
        $traitsResult : TraitsResult()
    then
       modify($traitsResult) {increment($target);}
       System.out.println("Univerasl increment called");
end

rule "Creating mind trait-extraverted"
	agenda-group "personalityTest"
	salience -100
	no-loop
	when
		$traitsResult : TraitsResult($extraverted: extraverted, $introverted: introverted, $extraverted >= $introverted)
	then
		Trait trait = new Trait("mind", "extraverted");
		insert(trait);
		System.out.println("Extroverted inserted");
	
end

rule "Creating mind trait-introverted"
	agenda-group "personalityTest"
	salience -100
	no-loop
	when
		$traitsResult : TraitsResult($extraverted: extraverted, $introverted: introverted, $extraverted < $introverted)
	then
		Trait trait = new Trait("mind", "introverted");
		insert(trait);
		System.out.println("Introverted inserted");
	
end

rule "Creating mind identity-assertive"
	agenda-group "personalityTest"
	salience -100
	no-loop
	when
		$traitsResult : TraitsResult($assertive: assertive, $turbulent: turbulent, $assertive >= $turbulent)
	then
		Trait trait = new Trait("identity", "assertive");
		insert(trait);
		System.out.println("Assertive inserted");
end

rule "Creating mind identity-turbulent"
	agenda-group "personalityTest"
	salience -100
	no-loop
	when
		$traitsResult : TraitsResult($assertive: assertive, $turbulent: turbulent, $assertive < $turbulent)
	then
		Trait trait = new Trait("identity", "turbulent");
		insert(trait);
		System.out.println("Turbulent inserted");
end

rule "Creating mind nature-thinking"
	agenda-group "personalityTest"
	salience -100
	no-loop
	when
		$traitsResult : TraitsResult($thinking: thinking, $feeling: feeling, $thinking >= $feeling)
	then
		Trait trait = new Trait("nature", "thinking");
		insert(trait);
		System.out.println("Thinking inserted");
end

rule "Creating mind nature-feeling"
	agenda-group "personalityTest"
	salience -100
	no-loop
	when
		$traitsResult : TraitsResult($thinking: thinking, $feeling: feeling, $thinking < $feeling)
	then
		Trait trait = new Trait("nature", "feeling");
		insert(trait);
		System.out.println("Feeling inserted");
end

rule "Creating mind energy-realist"
	agenda-group "personalityTest"
	salience -100
	no-loop
	when
		$traitsResult : TraitsResult($realist: realist, $visionary: visionary, $realist >= $visionary)
	then
		Trait trait = new Trait("energy", "realist");
		insert(trait);
		System.out.println("Realist inserted");
end

rule "Creating mind energy-visionary"
	agenda-group "personalityTest"
	salience -100
	no-loop
	when
		$traitsResult : TraitsResult($realist: realist, $visionary: visionary, $realist < $visionary)
	then
		Trait trait = new Trait("energy", "visionary");
		insert(trait);
		System.out.println("Visionary inserted");
end


rule "Creating mind tactics-judging"
	agenda-group "personalityTest"
	salience -100
	no-loop
	when
		$traitsResult : TraitsResult($judging: judging, $prospecting: prospecting, $judging >= $prospecting)
	then
		Trait trait = new Trait("tactics", "judging");
		insert(trait);
		System.out.println("Judging inserted");
		
		
end

rule "Creating mind tactics-prospecting"
	agenda-group "personalityTest"
	salience -100
	no-loop
	when
		$traitsResult : TraitsResult($judging: judging, $prospecting: prospecting, $judging < $prospecting)
		
	then
		Trait trait = new Trait("tactics", "prospecting");
		insert(trait);
		System.out.println("Prospecting inserted");
		System.out.println($judging);
		System.out.println($prospecting);
end

rule "Grouping traits"
	agenda-group "personalityTest"
	salience -200
	when $list: List() from collect(Trait())
	then
		insert($list);
		System.out.println("Number of traits found: " + $list.size());
end
		

